Week2
    เริ่มต้นเขีบนภาษาซี
        1.ชื่อตัวแปร
            1.1 ชื่ิต้องไม่ซ้ำกับคำสงวน และคำมาตรฐานที่คอมไพล์เลอร์รู้จัก
            1.2 จะต้องขึ้นต้นด้วยตัวอักษรภาษาอังกฤษ หรือเครื่องหมาย Underscore เท่านั้น
            1.3 ตัวต่อไปต้องเป็นตัวอักษรหรือตัวเลขหรือเครื่องหมาย Underscore
            1.4 การตั้งชื่อจะต้องไม่มีช่องว่าง
            1.5 ตัวอักษรตัวเล็กและตัวอักษรตัวใหญ่จะมีความมายแตกต่างกัน
        2.ประเภทข้อมูล
            Data type	        Size	            Value
            char	        1 byte	            -128 to 127
            unsigned char	1 byte	               0 to 255
            signed char	    1 byte	            -128 to 127
            int	            4 byte	  -2,147,483,648 to 2,147,483,647
            unsigned int	4 byte	               0 to 4,294,967,295
            short	        2 byte	         -32,768 to 32,767
            unsigned short	2 byte	               0 to 65,535
            long	        4 byte	  -2,147,483,648 to 2,147,483,647
            unsigned long	4 byte	               0 to 4,294,967,295
            float	        4 byte	         1.2E-38 to 3.4E+38
            double      	8 byte	        2.3E-308 to 1.7E+308
            long double	    10 byte	       3.4E-4932 to 1.1E+4932
            bool	        1 bit	               0 to 1
        3.รหัสควบคุมในภาษา C
            \a ส่งเสียง Beep
            \n ขึ้นบรรทัดใหม่
            \t  แท็บในแนวนอน
            \b ย้อนกลับไป 1 ตัวอักษร
            \v แท็บในแนวตั้ง
            \f ขึ้นหน้าใหม่
            \r รหัส Return
            \’ แทนตัวอักษร Single Quote(’)
            \’’ แทนตัวอักษร Double Quote(’’)
            \\ แทนตัวอักษร Backslash(\)
            \000 แทนตัวอักษรที่มีค่า ASCII เท่ากับ 000 ในระบบเลขฐานแปด
            \xhh แทนตัวอักษรที่มีค่า ASCII เท่ากับ  hh ในระบบเลขฐานสิบหก
        4.การประกาศตัวแปร
            4.1 ตัวแปรในภาษา C ต้องถูกประกาศก่อนถูกใช้งาน
            4.2 การประกาศตัวแปรแต่ละตัวแปรจะต้องกำหนดชนิดของข้อมูล
            4.3 อาเรย์ในภาษา C
                    อาเรย์ คือตัวแปรที่เก็บข้อมูลเป็นชุดข้อมูล โดยข้อมูลของอาเรย์จะเก็บในรูปแบบของลำดับข้อมูล 
                โดยข้อมูลนั้นจะต้องเป็นประเภทเดียวกัน ในการประกาศอาเรย์ในภาษา C มันมีรูปแบบคือ:
                                    type name[size];
                การประกาศอาเรย์
                    การประกาศอาเรย์นั้นคล้ายกับการประกาศตัวแปร เพราะว่าอาเรย์ก็เป็นตัวแปรประเภทหนึ่ง 
                ดังนั้นในการที่จะใช้งานอาเรย์ เราจำเป็นที่จะต้องประกาศมันก่อน
                                    int n[5];
                                    char name[20];
                                    double m[10];
        5.printf(); put();
            printf();
                รหัสควบคุมรูปแบบ                   การนำไปใช้งาน
                    %d              สำหรับแสดงผลค่าของตัวแปรชนิดจำนวนเต็ม
                                    ( int, short, unsigned short, long, unsigned long)

                    %u              สำหรับแสดงผลตัวเลขจำนวนเต็มบวก 
                                    ( unsigned short, unsigned long )

                    %o              สำหรับแสดงผลออกมาในรูปแบบของเลขฐานแปด

                    %x              สำหรับแสดงผลออกมาในรูปแบบของเลขฐานสิบหก

                    %f              สำหรับแสดงผลค่าของตัวแปรชนิดจำนวนทศนิยม 
                                    ( float, double, long double )

                    %e              สำหรับแสดงผลตัวเลขทศนิยมออกมาในรูปแบบของ
                                    ( E หรือ e ) ยกกำลัง ( float, double, long double )

                    %c              สำหรับแสดงผลอักขระ 1 ตัว ( char )

                    %s              สำหรับแสดงผลข้อความ ( string หรืออักขระมากกว่า 1 ตัว)

                    %p              สำหรับแสดงผลตัวชี้ตำแหน่ง ( pointer )
            put();
                putchar()
                    เป็นฟังก์ชันที่ใช้ในการแสดงผลลัพธ์ออกจอภาพทีละ 1 ตัวอักขระ โดยลักษณะของฟังก์ชันนี้เป็นฟังก์ชันที่ต้องการ 
                argument 1 ค่าที่เป็นข้อมูลชนิด single character (char)
                puts()
                    เป็นฟังก์ชันที่พิมพ์ข้อความออกแสดงทางจอภาพ โดยลักษณะของฟังก์ชันนี้เป็นฟังก์ชันที่ต้องการ  
                argument 1 ค่าที่เป็นชนิดข้อความ (string constant)
        6.Character Input and Output
            getchar()
                    เป็นฟังก์ชันที่ใช้รับข้อมูลจากคีย์บอร์ดเพียง 1 ตัวอักขระ โดยการรับข้อมูลของฟังก์ชันนี้จะต้องกดแป้น enter 
                ทุกครั้งที่ป้อนข้อมูลเสร็จ จึงทำให้เห็นข้อมูลที่ป้อนปรากฏบนจอภาพด้วย ถ้าต้องการนำข้อมูลที่ป้อนผ่านทางคีย์บอร์ดไปใช้งาน  
                จะต้องกำหนดตัวแปรชนิด single character (char) ขึ้นมา 1 ตัว เพื่อเก็บค่าข้อมูลที่รับผ่านทางคีย์บอร์ด
            getch()
                    เป็นฟังก์ชันที่ใช้รับข้อมูลเพียง 1 ตัวอักขระเหมือนกับฟังก์ชัน getchar() แตกต่างกันตรงที่เมื่อใช้ฟังก์ชันนี้รับข้อมูล 
                    ข้อมูลที่ป้อนเข้าไปจะไม่ปรากฏให้เห็นบนจอภาพและไม่ต้องกดแป้น enter ตาม
            getche()
                    เป็นฟังก์ชันที่ใช้รับข้อมูลจากคีย์บอร์ดเพียง 1 ตัวอักขระ เหมือนฟังก์ชัน getch() แตกต่างกันตรงที่ข้อมูลที่ป้อนเข้าไป 
                    จะปรากฏให้เห็นบนจอภาพด้วย นอกนั้นมีการทำงาน และลักษณะการใช้งานเหมือนฟังก์ชัน getch() ทุกประการ
            gets()
                    เป็นฟังก์ชันที่ใช้รับข้อมูลชนิดข้อความ (string) จากคีย์บอร์ด จากนั้นนำข้อมูลที่รับเข้าไปเก็บไว้ในตัวแปรสตริง 
                    (string variables) ที่กำหนดไว้
        7.Operators
            7.1 Arithmetic Operators
                7.1.1 +,-,*,/,% (% ไม่สามารถใช้กับข้อมูลที่เป็น float และ double)
                7.1.2 หาก operator มี precedence เท่ากัน เราจะพิจารณา operator จากซ้ายไปขวา
            7.2 Relational Operators และ Logical Operators
                Relational Operators
                    >,<,<=,>=,==,!=
                Logical Operators
                    &&(and),||(or),!(not)
            7.3 Increment and Decrement Operators
                n ++,++ n,n --,-- n
            7.4 Bitwise Operators
                Symbol	        Name	                 Description
                  &	    Bitwise AND	1           ถ้าบิตทั้งคู่เป็น 1, ไม่เช่นนั้นเป็น 0
                  |	    Bitwise inclusive OR	1 ถ้าอย่างน้อยหนึงบิตเป็น 1, ไม่เช่นนั้นเป็น 0
                  ^	    Bitwise exclusive OR	1 ถ้าทั้งสองบิตแตกต่างกัน, ไม่เช่นนั้นเป็น 0
                  ~	    bit inversion	        กลับบิตจาก 1 เป็น 0 และในทางตรงข้าม
                 <<	    Shift bits left	        เลื่อนบิตไปทางซ้าย เติมบิต 0 ทางขวา
                 >>	    Shift bits right	    เลื่อนบิตไปทางขวา เติมบิต 0 ทางซ้าย